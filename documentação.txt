Precisão em números flutuantes(float):
(https://www.alura.com.br/artigos/precisao-numeros-decimais-python?utm_term=&utm_campaign=%5BSearch%5D+%5B
Performance%5D+-+Dynamic+Search+Ads+-+Artigos+e+Conte%C3%BAdos&utm_source=adwords&utm_medium=ppc&hsa_acc=
7964138385&hsa_cam=11384329873&hsa_grp=164240702375&hsa_ad=703829337057&hsa_src=g&hsa_tgt=aud-574826424850:
dsa-2276348409543&hsa_kw=&hsa_mt=&hsa_net=adwords&hsa_ver=3&gad_source=1&gclid=
Cj0KCQjwh7K1BhCZARIsAKOrVqHvzL9EB5ChTPFE5UdVNz6XUZcBofyLBAP5LVhsjPPmyio96VjNz2kaApdcEALw_wcB)

Formatação de ponto e virgula:
(https://www.alura.com.br/artigos/formatando-moeda-no-python?utm_term=&utm_campaign=%5BSearch%5D+%5BPerformance%5D
+-+Dynamic+Search+Ads+-+Artigos+e+Conte%C3%BAdos&utm_source=adwords&utm_medium=ppc&hsa_acc=7964138385&hsa_cam=11384
329873&hsa_grp=164240702375&hsa_ad=703829337057&hsa_src=g&hsa_tgt=aud-2200131122553:dsa-2276348409543&hsa_kw=&hsa_mt
=&hsa_net=adwords&hsa_ver=3&gad_source=1&gclid=Cj0KCQjwh7K1BhCZARIsAKOrVqH7tBqhNIvfnliSMbEH5ePHsMm5XIlWoTJXS-EuU5QnQw
RjrcfjZ4kaAl3LEALw_wcB)

--------------Aula 4 - Criando variáveis--------------------

Criando variáveis:

Sempre criamos variáveis com letras minusculas e sem acento.

variável - recebe - valor
nome         =     'Renato'
idade        =     29
peso         =     90

Para criarmos perguntas e logo após abrir um campo para resposta, colocamos 'Input' que é igual a 'leia'.

Exemplo:

nome = input('Qual é o seu nome? ')

Quando terminamos uma sentença de código ou programa, é recomendando adicionar uma nova linha vazia abaixo.
Conforme orientação PEP8

Exemplo:

print('Olá, mundo!') #Fim do programa/Sentença de código.
(linha vazia aqui).

-----------Aula 6 - Tipos primitivos e saída de dados-------

Todos os tipos primitivos:
int > Números inteiros (Ex: 7, -4, 0, 9875)
float > Números reais(com pontos flutuantes) (Ex: 4.5, 0.076, -15.223, 7.0)
bool > Lógicos(booleanos) (Ex: True, False)
str > Strings(Frases, palavras...) (Ex: 'Olá, mundo!', '7.5')

Se não especificarmos o tipo primitivo, por padrão o 'type'(tipo) é 'str'(string).

Outra maneira de usar type usando métodos() (Todos os itens abaixo são métodos):

isalnum – Verifique se todos os caracteres no texto são alfanuméricos

isalpha – Verifique se todos os caracteres no texto são letras

isascii – Verifique se a sequência é composta por todos os caracteres ASCII ou se a sequência estiver vazia
também retornara true

isdecimal – Verifique se todos os caracteres no objeto unicode são decimais

isdigit – Verifique se todos os caracteres no texto são dígitos

isidentifier – Verifique se a sequência é um identificador válido :: O método isidentifier() retornará True
se a string for um identificador válido, caso contrário, False. Uma sequência é considerada um identificador
válido se contiver apenas letras alfanuméricas (a-z) e (0-9) ou sublinhados (_). Um identificador válido não
pode começar com um número ou conter espaços.

islower – Verifique se todos os caracteres do texto estão em minúsculas

isnumeric – Verifique se todos os caracteres no texto são numéricos

isprintable – Verifique se todos os caracteres no texto são imprimíveis

isspace – Verifique se todos os caracteres no texto são espaços em branco

istitle – Verifique se cada palavra começa com uma letra maiúscula

isupper – Verifique se todos os caracteres do texto estão em maiúsculas

-----------Aula 7 - Operadores aritméticos---------

+ adição
- subtração
* multiplicação
/ divisão
** potência
// divisão inteira
% resto da divisão

Ordem de precedência:
1 ()
2 potência **
3 multiplicação*, divisão /, divisão inteira //, resto da divisão %
4 adição +, subtração -

Para fazer a raíz quadrada, exemplo:
81**(1/2) == 9.0
Ou
pow(r, (1/2)) > 'r' nesse caso estamos atribuindo a uma variável.

-----------Aula 8 - Utilizando módulos---------

https://docs.python.org/3/installing/index.html
https://docs.python.org/pt-br/3/library/index.html
https://pypi.org/project/emoji/
https://www.webfx.com/tools/emoji-cheat-sheet/

import random
print(random.randint(1, 60), random.randint(1, 60), random.randint(1, 60),
      random.randint(1, 60), random.randint(1, 60), random.randint(1, 60))

--------------Aula 9 - Manipulando texto----------

https://docs.python.org/pt-br/3/library/string.html#format-string-syntax
Alinhamento de strings:
https://docs.python.org/3/library/string.html#format-specification-mini-language

------------Aula 10 - Condições-------------

https://docs.python.org/pt-br/3/tutorial/controlflow.html

if e else > Estrutura condicional composta
Somente if > Estrutura condicional simples.

----------Aula 11 - Cores no terminal-----------

Padrão ANSI - Escape sequence
Começa com contra barra '\'

Em python começamos com:
\033[m
Entre colchete '[' e 'm' colocamos o código da cor.
Style(0);Text(33);Back(44)
\033[0;33;44m

Códigos para style >
0 (none)
1 (bold)
4 (underline)
7 (negative)

Códigos para text >
30 black
31 red
32 green
33 yellow
34 blue
35 magento
36 ciano
37 grey (cor padrão)
97 white

Códigos para background >
40 black
41 red
42 green
43 yellow
44 blue
45 magento
46 ciano
47 grey
107 white

Para tirar as configurações >
\033[m

----------Aula 13 - Estrutura de repetição for-----------

https://docs.python.org/pt-br/3/tutorial/controlflow.html#for-statements

Conhecido como laço de repetição ou iteração, ou estrutura de repetição com variável de controle.

------------------Aula 14 - Estrutura de repetição while---------------

https://docs.python.org/pt-br/3/reference/compound_stmts.html#while

Conhecido como estrutura de repetição com teste lógico

---------------Aula 15 - Interrompendo repetições While-------------------
Lógica                    |   Prática
Enquanto Verdadeiro:      |   While True:
    se (houver)bloco      |     if (houver)bloco
        passo             |         passo
    se (não houver)bloco  |     if (não houver)bloco
        pula              |         pula
    se (houver)moeda      |     if (houver)moeda
        pega              |         pega
    se (houver)troféu     |     if (houver)troféu
        pula              |         pula
        *Interrompa*      |         *break*
Pega                      |   Pega

-----------------Aula 16 - Tuplas (Variáveis compostas)-----------------

Podem começar com parenteses '(tupla)', colchetes '[lista]' ou chaves '{dicionário}'
Tuplas são IMUTÁVEIS.
Para mudar algum item em uma tupla, temos que parar o programa o modificar o item na criação da variável.

As tuplas ficam entre parenteses '()', mas nas versões mais atuais de python não é necessário
colocar entre parenteses.
Ex: lanche = ('hambúrguer', 'suco', 'pizza', 'pudim')

----------------Aula 17 - Listas (Variáveis compostas)---------------------
https://docs.python.org/pt-br/3/tutorial/datastructures.html

Listas são MUTÁVEIS

#Listas são MUTÁVEIS
lanche = ['hamburger', 'suco', 'pizza', 'pudim']
print(lanche)
print(len(lanche))

#Substituindo item
lanche[3] = 'sorvete'
print(lanche)

#Adicionando itens no final de uma lista
lanche.append('biscoito')
print(lanche)

#Adicionando em uma determinada posição ou entre dois itens
lanche.insert(0, 'cachorro-quente')
print(lanche)

#Três maneiras de eliminar itens de uma lista
del lanche[3]
lanche.pop(3)
lanche.remove('biscoito')
print(lanche)

#Removendo item somente se ele estiver na lista. Se não estiver, não apresenta erro no console
if 'pizza' in lanche:
    lanche.remove('pizza')
else:
    print('Não achei pizza na lista')

#Declarando lista com range
valores = list(range(4, 11))
print(valores)

#Ordenando números em ordem crescente
desordenados = [8, 2, 5, 4, 9, 3, 0]
desordenados.sort()
print(desordenados)

#Colocando em ordem decrescente
desordenados.sort(reverse=True)
print(desordenados)

*** Parte 2 ***
Listas dentro de listas > [:]

pessoas = [ ['Pedro', 25], ['Maria', 19], ['João', 32] ]
pessoas >         0              1              2

---------------------Aula 19 - Dicionários--------------------
https://docs.python.org/pt-br/3/tutorial/datastructures.html#dictionaries

Dicionários são identificados por {}
Para especificar uma variável como dicionário:
nome = dict()

.append() não funciona em dicionários

Em dicionários temos valor, chave e item.

----------------------Aula 20 - Funções--------------------
https://docs.python.org/pt-br/3/tutorial/controlflow.html#defining-functions

Funções são rotinas

Entre a definição de uma função e o programa principal, dar um espaço de 2 linhas

----------------------Aula 21 - Funções (parte 2)----------------------

-Interactive Help
    -Dentro do python console digitamos 'help()', logos depois digitamos a funcionalidade, exemplo 'print'
    e ele retorna uma explicação da funcionalidade. Para sair digitamos 'q' ou 'quit'.
    -Dentro do próprio campo de script podemos colocar 'help(print)' e executar que ele retorna uma explicação.
    -Podemos usar também print('funcionalidade'__doc__)

-docstrings
    -Fornecemos a documentação do nosso próprio código.

-Parâmetros opcionais
    -Se em uma função deixarmos um parâmetro em branco ele será ignorado sem apresentar
    erro na execução do código.

-Escopo de variáveis
    -Quando uma variável é declarada dentro de uma função, laço de repetição ou semelhante, ele só pode
    ser usado lá. (Variável local)
    -Quando uma variável pode ser usada em todo programa, dentro ou fora de uma função
    ou laço de repetição. (Variável global)

-Retorno de resultados/valores (return)
    -

--------------------------Aula 22 - Módulos e pacotes---------------------------

Todo arquivo .py pode ser um módulo
Exemplo de módulo:
from uteis import fatorial, dobro
Em caso de duas funções com o mesmo nome, vale a última funcionalidade importada. Por isso o mais
recomendado é importar somente "uteis".
uteis é o nome do módulo, e fatorial é o nome da função

Vantagens:
- Organização do código
- Facilidade na manutenção
- Ocultação de código detalhado
- Reutilização em outro projetos

*PACOTES* (Em outras linguagens bibliotecas)
Quando um módulo fica muito grande, junção de módulos separados por assuntos

Criando pacote: (Começa a partir de 25 minutos da aula 22)
python package > __init__.py (dentro do arquivo)

Pacote uteis.py
    números()
        __init__.py
    datas()
        __init__.py
    strings()
        __init__.py
    cores()
        __init__.py

--------------------------aula 23 - Tratamento de erros----------------------

https://docs.python.org/pt-br/3/tutorial/errors.html

Procurar por:
Lista de exceções(Exception) de python

---------------fim--------------------
